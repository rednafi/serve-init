name: Test, build, and deploy

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22

      - name: Check go fmt
        run: cd app && gofmt -l . | tee fmt.log && test -z "$(cat fmt.log)"

      - name: Run tests
        run: |
          cd app
          go test ./...

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to github container registry
        run: docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GHCR_PAT }}

      - name: Build docker images
        env:
          AUTH_TOKEN: ${{ secrets.AUTH_TOKEN }}
        run: docker compose -f app/docker-compose.yml build

      - name: List docker images
        run: docker images

      - name: Tag and push docker images
        env:
          APP_IMAGE_NAME: ghcr.io/${{ github.repository }}/app:latest
          CADDY_IMAGE_NAME: ghcr.io/${{ github.repository }}/caddy:latest
        run: |
          docker tag app-app:latest $APP_IMAGE_NAME
          docker tag app-caddy:latest $CADDY_IMAGE_NAME
          docker push $APP_IMAGE_NAME
          docker push $CADDY_IMAGE_NAME

      - name: Install ssh keys in the ci
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
            echo $SSH_PRIVATE_KEY > ~/.ssh/id_rsa
            ssh-keyscan -H $SSH_HOST > ~/.ssh/known_hosts

      - name: Connect to remote machine and pull
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          WORK_DIR: ${{ secrets.WORK_DIR }}
        run: |
          ssh $SSH_USER@$SSH_HOST "cd $WORK_DIR && docker compose pull && docker compose up -d && exit"
