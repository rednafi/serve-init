name: Test, build, and deploy

on:
  push:
    branches:
      - main

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22

      - name: Check go fmt
        run: cd app && gofmt -l . | tee fmt.log && test -z "$(cat fmt.log)"

      - name: Run Tests
        run: |
          cd app
          go test ./...

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker images
        env:
          AUTH_TOKEN: ${{ secrets.AUTH_TOKEN }}
        run: docker compose -f app/docker-compose.yml build

      - name: List Docker images
        run: docker images

      - name: Tag and push Docker images
        run: |
          APP_IMAGE_NAME=ghcr.io/${{ github.repository }}/app:latest
          CADDY_IMAGE_NAME=ghcr.io/${{ github.repository }}/caddy:latest
          docker tag app-app:latest $APP_IMAGE_NAME
          docker tag app-caddy:latest $CADDY_IMAGE_NAME
          docker push $APP_IMAGE_NAME
          docker push $CADDY_IMAGE_NAME

      - name: Deploy to server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          APP_IMAGE_NAME: ghcr.io/${{ github.repository }}/app:latest
          CADDY_IMAGE_NAME: ghcr.io/${{ github.repository }}/caddy:latest
          REPO_URL: ${{ github.server_url }}/${{ github.repository }}.git
          APP_DIR: "/home/$SSH_USERNAME/deployed_apps/app"
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

          ssh-keyscan $SERVER_IP >> ~/.ssh/known_hosts

          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 $SSH_USERNAME@$SERVER_IP << EOF
            set -e pipefail

            echo "Running commands on remote server"
            echo "SSH_USERNAME: $SSH_USERNAME"
            echo "REPO_URL: $REPO_URL"
            echo "APP_IMAGE_NAME: $APP_IMAGE_NAME"
            echo "CADDY_IMAGE_NAME: $CADDY_IMAGE_NAME"
            echo "APP_DIR: $APP_DIR"

            # Ensure the directory is removed if it exists
            if [ -d "$APP_DIR" ]; then
              echo "Removing existing directory $APP_DIR"
              rm -rf "$APP_DIR"
            fi

            # Clone the repository
            echo "Cloning repository $REPO_URL into $APP_DIR"
            git clone $REPO_URL "$APP_DIR"

            # Change to the app directory
            cd "$APP_DIR"
            echo "Changed to directory $APP_DIR"

            # Pull the latest changes
            echo "Pulling latest changes from repository"
            git pull

            # Pull Docker images
            echo "Pulling Docker image $APP_IMAGE_NAME"
            docker pull $APP_IMAGE_NAME
            echo "Pulling Docker image $CADDY_IMAGE_NAME"
            docker pull $CADDY_IMAGE_NAME

            # Start Docker Compose
            echo "Starting Docker Compose"
            docker compose -f docker-compose.yml up -d
          EOF
