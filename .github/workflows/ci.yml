name: Test, build, and deploy

on:
  push:
    branches:
      - main

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22

      - name: Check go fmt
        run: |
          cd app
          fmt_results=$(gofmt -l .)
          if [ -n "$fmt_results" ]; then
            echo "Go code is not formatted. Please run 'go fmt' on the following files:"
            echo "$fmt_results"
            exit 1
          fi

      - name: Run Tests
        run: |
          cd app
          go test ./...

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push Docker images
        run: |
          cd app
          docker compose -f ../docker-compose.yml build
          IMAGE_NAME=ghcr.io/${{ github.repository }}/app:latest
          docker tag app_app:latest $IMAGE_NAME
          docker push $IMAGE_NAME

      - name: Deploy to server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan $SERVER_IP >> ~/.ssh/known_hosts
          scp -i ~/.ssh/id_ed25519 docker-compose.yml $SSH_USERNAME@$SERVER_IP:~/app/
          ssh -i ~/.ssh/id_ed25519 $SSH_USERNAME@$SERVER_IP << 'EOF'
            cd ~/app
            docker compose pull
            docker compose up -d
          EOF
